generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model courses {
  id               Int                @id @default(autoincrement())
  name             String
  duration         Int                @default(1)
  faculty          faculty[]
  students_courses students_courses[]
}

model faculty {
  id        Int       @id @default(autoincrement())
  name      String
  join_date DateTime?
  course_id Int
  courses   courses   @relation(fields: [course_id], references: [id])
}

model students {
  id               Int                @id @default(autoincrement())
  name             String
  email            String
  student_id       String             @unique
  admission_date   DateTime           @default(now())
  details          String
  description      String
  students_courses students_courses[]
}

model students_courses {
  course_id   Int
  student_id  Int
  assigned_at DateTime @default(now())
  courses     courses  @relation(fields: [course_id], references: [id])
  students    students @relation(fields: [student_id], references: [id])

  @@id([course_id, student_id])
}

model Users {
  id         String    @id
  password   String?
  email      String
  salt       String?
  active     Boolean   @default(true)
  deleted    Boolean   @default(false)
  created_at DateTime  @default(now())
  created_by String
  updated_at DateTime  @updatedAt
  updated_by String
  first_name String
  last_name  String
  user_name  String
  products   Product[]
}

model Categories {
  id         String    @id
  name       String
  deleted    Boolean   @default(false)
  active     Boolean   @default(true)
  created_at DateTime  @default(now())
  created_by String
  updated_at DateTime  @updatedAt
  updated_by String
  products   Product[]
}

model Product {
  id          String          @id @default(uuid())
  name        String
  price       Float
  sn          String
  active      Boolean
  deleted     Boolean
  description String
  category_id String
  created_at  DateTime        @default(now())
  created_by  String
  updated_at  DateTime        @updatedAt
  updated_by  String
  user_id     String
  amount      Int             @default(0)
  categories  Categories      @relation(fields: [category_id], references: [id])
  user        Users           @relation(fields: [user_id], references: [id])
  images      ProductImage[]
  order       ProductOnOrder?
}

model ProductOnOrder {
  id         String   @id @default(uuid())
  product_id  String   @unique
  shipping   Float
  amount     Float
  total_price Float
  active     Boolean
  deleted    Boolean
  created_at DateTime @default(now())
  created_by String
  updated_at DateTime @updatedAt
  updated_by String
  product    Product  @relation(fields: [product_id], references: [id])
}

model ProductImage {
  id         String   @id @default(uuid())
  product_id  String
  image_key   String
  url        String
  active     Boolean
  deleted    Boolean
  created_at DateTime @default(now())
  created_by String
  updated_at DateTime @updatedAt
  updated_by String
  product    Product  @relation(fields: [product_id], references: [id])
}


model Gpu {
  id            Int     @id @default(autoincrement())
  manufacturer  String
  model         String
  series        String
  release_year  Int
  architecture  String
  memory_size   Int
  memory_type   String
  core_clock    Int
  boost_clock   Int
  cuda_cores    Int
}
